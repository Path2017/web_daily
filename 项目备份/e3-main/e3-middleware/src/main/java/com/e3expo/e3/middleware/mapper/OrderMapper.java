package com.e3expo.e3.middleware.mapper;

import java.util.List;
import java.util.Set;

import com.e3expo.e3.model.Order;
import com.e3expo.e3.model.OrderModel;
import com.e3expo.e3.model.form.OrderAdminParam;
import com.e3expo.e3.model.param.PageParam;
import com.e3expo.e3.model.view.OrderDetailView;
import com.e3expo.e3.model.view.OrderView;
import com.e3expo.e3.model.view.WebAppOrderView;
import org.apache.ibatis.annotations.Param;

public interface OrderMapper {
	
	/**
	 * 根据OrderId 查询订单状态
	 * @param orderId
	 * @return
	 */
	OrderModel selectOrderStatusById(int orderId);
	
	/**
	 * 修改订单状态
	 * @param order
	 */
	void updateOrderStatus(OrderModel order);
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table te_order
     *
     * @mbggenerated Tue Nov 07 16:26:13 CST 2017
     */
    int deleteByPrimaryKey(Integer id);

    /**
     * 插入一条Order记录，并回写主键
     * @param record
     */
    int insert(Order record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table te_order
     *
     * @mbggenerated Tue Nov 07 16:26:13 CST 2017
     */
    int insertSelective(Order record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table te_order
     *
     * @mbggenerated Tue Nov 07 16:26:13 CST 2017
     */
    Order selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table te_order
     *
     * @mbggenerated Tue Nov 07 16:26:13 CST 2017
     */
    int updateByPrimaryKeySelective(Order record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table te_order
     *
     * @mbggenerated Tue Nov 07 16:26:13 CST 2017
     */
    int updateByPrimaryKey(Order record);

    /**
     * 根据RfpId查询order
     * @param rfpId
     * @return
     */
    Order selectByRfpId(Integer rfpId);
    /**
     * 后台管理-查询订单列表
     * @param param
     * @return
     */
    List<OrderView> getPagedOrderByAdmin(OrderAdminParam param);
    /**
     * 后台管理-查询订单列表的总条数
     * @param param
     * @return
     */
    Integer getPagedTotalNumByAdmin(OrderAdminParam param);
    /**
     * 获取订单详情
     * @param orderId
     * @return
     */
    OrderDetailView getOrderDetailView(Integer orderId);

    /**
     * 分页查询订单
     *
     * @param page
     * @param userId
     * @param statusSet
     * @return
     */
    List<WebAppOrderView> pageQueryOrderByStatusAndUserId(@Param("page") PageParam<WebAppOrderView> page,
                                                          @Param("userId") Integer userId,
                                                          @Param("statusSet") Set<Integer> statusSet);

    /**
     * 查询订单的总数
     *
     * @param userId
     * @param statusSet
     * @return
     */
    int selectOrderTotalCountByStatusAndUserId(@Param("userId") Integer userId,
                                               @Param("statusSet") Set<Integer> statusSet);

    /**
     * 查询web view
     *
     * @param rfpId
     * @return
     */
    WebAppOrderView selectRfpWebViewByRfpId(Integer rfpId);

    /**
     * 根据设计师的ID，查询竞标中（可以抢单的）的订单总数
     * @param badeIds
     * @return
     */
    int selectOnBiddingOrderCountByDesignerId(@Param("badeIds") List<Integer> badeIds);

    /**
     * 分页查询抢单中心
     * @param page
     * @param badeIds
     * @return
     */
    List<WebAppOrderView> pageQueryOnBiddingOrdersByDesignerId(@Param("page") PageParam<WebAppOrderView> page,
                                                               @Param("badeIds") List<Integer> badeIds);


    /**
     * 设计师所有订单数量
     * @param designerId
     * @return
     */
    int selectDesignerAllOrderListCount(Integer designerId);

    /**
     * 分页查询设计师所有订单
     *
     * @param page
     * @param designerId
     * @return
     */
    List<WebAppOrderView> pageQueryDesignerAllOrderList(@Param("page") PageParam<WebAppOrderView> page,
                                                        @Param("designerId") Integer designerId);

    /**
     * 查询完成订单数量
     * @param designerId
     * @return
     */
    int selectDesignerCompletedOrderCount(Integer designerId);

    /**
     * 查询完成订单列表
     *
     * @param page
     * @param designerId
     * @return
     */
    List<WebAppOrderView> pageQueryDesignerCompletedOrderList(@Param("page") PageParam<WebAppOrderView> page,
                                                              @Param("designerId") Integer designerId);

    /**
     * 查询设计师正在进行中的订单数
     * @param designerId
     * @return
     */
    int selectDesignerOngoingOrderCount(Integer designerId);

    /**
     * 查询设计师正在进行中的订单
     * @param page
     * @param designerId
     * @return
     */
    List<WebAppOrderView> pageQueryDesignerOngoingOrderList(@Param("page") PageParam<WebAppOrderView> page,
                                                            @Param("designerId") Integer designerId);
}